var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StaticMPI","category":"page"},{"location":"#StaticMPI","page":"Home","title":"StaticMPI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StaticMPI.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [StaticMPI]","category":"page"},{"location":"#StaticMPI.MPI_Comm_rank-Tuple{StaticMPI.Mpich.MPI_Comm}","page":"Home","title":"StaticMPI.MPI_Comm_rank","text":"MPI_Comm_rank(comm)\n\nObtain the rank of the calling MPI task within the specified MPI communicator comm\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Comm_size-Tuple{StaticMPI.Mpich.MPI_Comm}","page":"Home","title":"StaticMPI.MPI_Comm_size","text":"MPI_Comm_size(comm)\n\nObtain the number of tasks in the specified MPI communicator comm.\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Finalize-Tuple{}","page":"Home","title":"StaticMPI.MPI_Finalize","text":"MPI_Finalize()\n\nConclude the execution of the calling MPI task.\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Init-Tuple{}","page":"Home","title":"StaticMPI.MPI_Init","text":"MPI_Init()\nMPI_Init(argc::Int, argv::Ptr{Ptr{UInt8}})\n\nInitialize the execution environment of the calling MPI task for single- threaded execution. The optional arguments argc and argv are the traditional argument count and argument value pointer variables passed to a compiled executable by the operating system.\n\nReturns MPI_SUCCESS on success\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Irecv-Tuple{Any, Any, Any, StaticMPI.Mpich.MPI_Comm}","page":"Home","title":"StaticMPI.MPI_Irecv","text":"function MPI_Irecv(buffer::Buffer{T}, source::Int, tag::Int, comm::MPI_Comm, [request::Buffer{MPI_Request}])\n\nReceive length(buffer) elements of type T from rank source sent with tag tag over MPI communicator comm. Recived data is stored in buffer, with MPI_Request stored in request.\n\nReturns immediately, even though buffer will not be updated until the message has been received (non-blocking receive). The status of the incoming message can later be checked using the resulting MPI_Request object.\n\nReturns MPI_SUCCESS on success.\n\nSee also: MPI_Recv for blocking equivalent, MPI_Wait*\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Isend-Tuple{Any, Any, Any, StaticMPI.Mpich.MPI_Comm}","page":"Home","title":"StaticMPI.MPI_Isend","text":"function MPI_Isend(buffer::Buffer{T}, dest::Int, tag::Int, comm::MPI_Comm, [request::Buffer{MPI_Request}])\n\nSend length(buffer) elements of type T to rank source with tag tag over MPI communicator comm, with resulting MPI_Request stored in request.\n\nReturns immediately, regardless of whether the message has been received (non-blocking send). The status of the sent message can later be checked using the resulting MPI_Request object.\n\nReturns MPI_SUCCESS on success.\n\nSee also: MPI_Send for blocking equivalent, MPI_Wait*\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Recv-Tuple{Any, Any, Any, StaticMPI.Mpich.MPI_Comm}","page":"Home","title":"StaticMPI.MPI_Recv","text":"function MPI_Recv(buffer::Buffer{T}, source::Int, tag::Int, comm::MPI_Comm, [status::Buffer{MPI_Status}])\n\nReceive length(buffer) elements of type T from rank source sent with tag tag over MPI communicator comm. Recived data is stored in buffer, with MPI_Status stored in status.\n\nDoes not return until the message has been received (blocking receive).\n\nSee also: MPI_Irecv for non-blocking equivalent\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Send-Union{Tuple{T}, Tuple{Union{Ref{T}, AbstractArray{T}}, Any, Any, StaticMPI.Mpich.MPI_Comm}} where T","page":"Home","title":"StaticMPI.MPI_Send","text":"function MPI_Send(buffer::Buffer{T}, dest::Int, tag::Int, comm::MPI_Comm)\n\nSend length(buffer) elements of type T to rank source with tag tag over MPI communicator comm.\n\nDoes not return until buffer can safely be reused, which may not be until the message has been received (blocking send).\n\nReturns MPI_SUCCESS on success.\n\nSee also: MPI_Isend for non-blocking equivalent\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Wait-Tuple{Any, Union{Ref{StaticMPI.Mpich.MPI_Status}, AbstractArray{StaticMPI.Mpich.MPI_Status}}}","page":"Home","title":"StaticMPI.MPI_Wait","text":"MPI_Wait(request::MPI_Request, [status::Buffer{MPI_Status}])\n\nWait (i.e., do not return) until the operation corresponding to the MPI_request object request has been completed. The resulting MPI_Status objects will be stored in the buffer status\n\nReturns MPI_SUCCESS on success.\n\nSee also: MPI_Isend, MPI_Irecv, etc.\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Waitall-Tuple{Any}","page":"Home","title":"StaticMPI.MPI_Waitall","text":"MPI_Waitall(array_of_requests::Buffer{MPI_Request}, [array_of_statuses::Buffer{MPI_Status}])\n\nWait (i.e., do not return) until the all of the operation scorresponding to the MPI_request objects in array_of_requests have been completed. The resulting MPI_Status objects will be stored in the corresponding positions of array_of_statuses.\n\nReturns MPI_SUCCESS on success.\n\nSee also: MPI_Isend, MPI_Irecv, etc.\n\n\n\n\n\n","category":"method"},{"location":"#StaticMPI.MPI_Waitany-Tuple{Any}","page":"Home","title":"StaticMPI.MPI_Waitany","text":"MPI_Waitany(array_of_requests::Buffer{MPI_Request}, [status::Buffer{MPI_Status}])\n\nWait (i.e., do not return) until the at least one of the operations corresponding to the MPI_request objects in array_of_requestshas been completed. The resultingMPI_Statusobject for the first operation to complete will be stored instatus`.\n\nReturns the index of the request corresponding to the first operation to complete.\n\nSee also: MPI_Isend, MPI_Irecv, etc.\n\n\n\n\n\n","category":"method"}]
}
